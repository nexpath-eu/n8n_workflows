{
  "nodes": [
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ",
          "mode": "list",
          "cachedResultName": "Congru UNSPSC BVP",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 430930944,
          "mode": "list",
          "cachedResultName": "Persian-Iran",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit#gid=430930944"
        },
        "options": {}
      },
      "name": "Read Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -736,
        -80
      ],
      "id": "ce3acd11-3374-4aaa-b6c7-40e0b2c18eb7",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GP0ycwiOqi6LmXaw",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"Status\"]}}",
              "operation": "notEqual",
              "value2": "Done"
            }
          ]
        }
      },
      "name": "Filter Rows To Process",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -512,
        -80
      ],
      "id": "ee1e906f-de57-4f74-8b3d-479644a96c4c"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "reset": false
        }
      },
      "name": "SplitInBatches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -288,
        -176
      ],
      "id": "9a39e76f-80a8-4e53-8540-3119f9c28501",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for the AI prompt\nconst item = $input.item;\n\n// Get the commodity information\nconst commodityCode = item.json[\"Commodity Code\"];\nconst commodityTitle = item.json[\"Commodity Title\"];\nconst persianName = item.json[\"Persian name\"];\nconst classCode = item.json[\"Class Code\"];\nconst classTitle = item.json[\"Class Title\"];\nconst familyCode = item.json[\"Family Code\"];\nconst familyTitle = item.json[\"Family Title\"];\nconst segmentCode = item.json[\"Segment Code\"];\nconst segmentTitle = item.json[\"Segment Title\"];\n\n// Get language and target market from the current item\nconst language = item.json[\"Language\"];\nconst targetMarket = item.json[\"Target Market\"];\n\n// Create structured product information for AI\nconst productInfo = {\n  commodity: {\n    code: commodityCode,\n    title: commodityTitle,\n    persianName: persianName\n  },\n  class: {\n    code: classCode,\n    title: classTitle\n  },\n  family: {\n    code: familyCode,\n    title: familyTitle\n  },\n  segment: {\n    code: segmentCode,\n    title: segmentTitle\n  },\n  market: {\n    language: language,\n    targetMarket: targetMarket\n  },\n  stakeholderGroups: [\n    \"End-Users (Consumers)\",\n    \"Employees\", \n    \"Distributors\",\n    \"Investors\",\n    \"Regulators and Compliance Bodies\",\n    \"Community\",\n    \"Media and Influencers\"\n  ]\n};\n\n// Store the row index for later update (get from row_number if available)\nconst rowIndex = item.json.row_number || item.index || 0;\n\n// Return the formatted data\nreturn {\n  json: {\n    productInfo,\n    rowIndex,\n    rawData: item.json\n  }\n};"
      },
      "name": "Prepare AI Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -176
      ],
      "id": "1db8d0df-b187-4aeb-ba5d-e5002bdd24f6"
    },
    {
      "parameters": {
        "jsCode": "// Get the input item\nconst item = $input.item;\n\n// Get analysis data from the AI response\nlet analysisData = null;\ntry {\n  // The OpenAI node returns data in item.json.content or item.json.message.content\n  let content = null;\n  \n  if (item.json && item.json.content) {\n    content = item.json.content;\n  } else if (item.json && item.json.message && item.json.message.content) {\n    content = item.json.message.content;\n  }\n  \n  // If content is a string, parse it as JSON\n  if (typeof content === 'string') {\n    const parsedContent = JSON.parse(content);\n    analysisData = parsedContent.Points_of_Parity || parsedContent;\n  } else if (content && content.Points_of_Parity) {\n    analysisData = content.Points_of_Parity;\n  } else if (content) {\n    analysisData = content;\n  }\n  \n  console.log('Analysis data extracted:', analysisData);\n  \n} catch (error) {\n  console.log('Error extracting Analysis data:', error.message);\n  console.log('Raw item data:', JSON.stringify(item.json, null, 2));\n}\n\n// Get the original row data from the Prepare AI Input node\nconst rawData = $('Prepare AI Input').item.json.rawData;\n\n// Improved RTF formatting function for benefits\nconst formatBenefitsRTF = (stakeholderBenefits) => {\n  if (!stakeholderBenefits || typeof stakeholderBenefits !== 'object') return '';\n  \n  let result = '';\n  \n  // Iterate through benefit categories (Financial, Functional, etc.)\n  for (const [categoryName, categoryData] of Object.entries(stakeholderBenefits)) {\n    if (categoryData && typeof categoryData === 'object') {\n      \n      // Check if this category has any benefits\n      const hasContent = Object.values(categoryData).some(subCategory => \n        Array.isArray(subCategory) && subCategory.length > 0\n      );\n      \n      if (hasContent) {\n        result += `━━━ ${categoryName.toUpperCase()} BENEFITS ━━━\\n\\n`;\n        \n        // Iterate through sub-categories\n        for (const [subCategoryName, benefits] of Object.entries(categoryData)) {\n          if (Array.isArray(benefits) && benefits.length > 0) {\n            result += `${subCategoryName}:\\n`;\n            benefits.forEach((benefit) => {\n              result += `▪ ${benefit}\\n`;\n            });\n            result += '\\n';\n          }\n        }\n        result += '\\n';\n      }\n    }\n  }\n  \n  return result.trim();\n};\n\n// Create the output object with EXACT column names\nconst outputData = {\n  \"Commodity Code\": rawData[\"Commodity Code\"] || \"\",\n  \"Commodity Title\": rawData[\"Commodity Title\"] || \"\",\n  \"Language\": rawData[\"Language\"] || \"\",\n  \"Target Market\": rawData[\"Target Market\"] || \"\",\n  \"Local Product Name\": \"\",\n  \"Market Leaders\": \"\",\n  \"Class Code\": rawData[\"Class Code\"] || \"\",\n  \"Class Title\": rawData[\"Class Title\"] || \"\",\n  \"Family Code\": rawData[\"Family Code\"] || \"\",\n  \"Family Title\": rawData[\"Family Title\"] || \"\",\n  \"Segment Code\": rawData[\"Segment Code\"] || \"\",\n  \"Segment Title\": rawData[\"Segment Title\"] || \"\",\n  \"End-Users (Consumers)\": \"\",\n  \"Employees\": \"\",\n  \"Distributors\": \"\",\n  \"Investors\": \"\",\n  \"Regulators and Compliance Bodies\": \"\",\n  \"Community\": \"\",\n  \"Media and Influencers\": \"\",\n  \"Date\": new Date().toISOString(),\n  \"Status\": \"Done\"\n};\n\n// Process stakeholder benefits data if available\nif (analysisData) {\n  const stakeholderMap = {\n    'End-Users': 'End-Users (Consumers)',\n    'Employees': 'Employees',\n    'Distributors': 'Distributors',\n    'Investors': 'Investors',\n    'Regulators and Compliance Bodies': 'Regulators and Compliance Bodies',\n    'Community': 'Community',\n    'Media and Influencers': 'Media and Influencers'\n  };\n  \n  for (const [aiKey, sheetColumn] of Object.entries(stakeholderMap)) {\n    if (analysisData[aiKey]) {\n      const formattedBenefits = formatBenefitsRTF(analysisData[aiKey]);\n      if (formattedBenefits) {\n        outputData[sheetColumn] = formattedBenefits;\n        console.log(`Formatted benefits for ${sheetColumn}:`, formattedBenefits.substring(0, 100) + '...');\n      }\n    }\n  }\n} else {\n  console.log('No analysis data found to process');\n}\n\n// Debug output\nconsole.log('Final output data keys:', Object.keys(outputData));\nconsole.log('Sample stakeholder content:', outputData['End-Users (Consumers)'].substring(0, 200));\n\nreturn {\n  json: outputData\n};\n"
      },
      "name": "Format Data for Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -176
      ],
      "id": "9cfe3031-bddc-4970-84ce-d35cec878745",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ",
          "mode": "list",
          "cachedResultName": "Congru UNSPSC BVP",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 430930944,
          "mode": "list",
          "cachedResultName": "Persian-Iran",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit#gid=430930944"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "Commodity Title"
          ],
          "schema": [
            {
              "id": "Commodity Code",
              "displayName": "Commodity Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Commodity Title",
              "displayName": "Commodity Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Language",
              "displayName": "Language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Target Market",
              "displayName": "Target Market",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Local Product Name",
              "displayName": "Local Product Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Market Leaders",
              "displayName": "Market Leaders",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Class Code",
              "displayName": "Class Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Class Title",
              "displayName": "Class Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Family Code",
              "displayName": "Family Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Family Title",
              "displayName": "Family Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Segment Code",
              "displayName": "Segment Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Segment Title",
              "displayName": "Segment Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "End-Users (Consumers)",
              "displayName": "End-Users (Consumers)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Employees",
              "displayName": "Employees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Distributors",
              "displayName": "Distributors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Investors",
              "displayName": "Investors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Regulators and Compliance Bodies",
              "displayName": "Regulators and Compliance Bodies",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Community",
              "displayName": "Community",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Media and Influencers",
              "displayName": "Media and Influencers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "output",
              "displayName": "output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "name": "Update Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        784,
        -176
      ],
      "id": "a2c2263c-b45d-485f-9d7f-24b41bcaa967",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GP0ycwiOqi6LmXaw",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "name": "No Action Needed",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -288,
        16
      ],
      "id": "ed77e969-578d-44aa-91f8-932905538fa3"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert brand manager and marketing strategist with over 15 years of experience in international markets. You specialize in competitive analysis, market intelligence, and stakeholder-centric brand positioning using the Brand Equity Theory by David Aaker. \n\nYour key tasks:\n- Apply Aaker's Model (brand loyalty, awareness, perceived quality, associations, proprietary assets) for all benefit mapping.\n- Identify real market leaders in the {{ $json.productInfo.market.targetMarket }} and analyze their communicated value for stakeholders using accurate, web-researched information.\n- Organize findings into a 3-level hierarchy: Stakeholder Group > Benefit Category > Sub-Category.\n- Always use the following predefined English terms EXACTLY for each of the three output levels; never translate or paraphrase:\n  - Stakeholder Groups: End-Users, Employees, Distributors, Investors, Regulators and Compliance Bodies, Community, Media and Influencers\n  - Benefit Categories: Financial, Functional, Self-Expression, Emotional, Experiential, Social, Cultural\n  - Sub-Categories (see below)\n\nCritical Language Guidelines:\n- All Stakeholder, Category, and Sub-Category keys must remain in English and match exactly.\n- ALWAYS generate benefit descriptions in the {{ $json.productInfo.market.language }} Language\n- Use the {{ $json.productInfo.market.targetMarket }} for market research and competitive context\n- Ensure linguistic and cultural appropriateness for the {{ $json.productInfo.market.language }} language\n",
              "role": "system"
            },
            {
              "content": "=# PRODUCT ANALYSIS REQUEST\n\nAnalyze this product—by stakeholder group—for Points of Parity (PoP), tailored to the target market and language, using David Aaker’s Brand Equity Model.\n\n## PRODUCT INFORMATION\n- **Commodity:** {{$json.productInfo.commodity.title}}\n- **Class:** {{$json.productInfo.class.title}}\n- **Family:** {{$json.productInfo.family.title}}\n- **Segment:** {{$json.productInfo.segment.title}}\n\n## TARGET PARAMETERS  \n- **Target Language:** {{$json.productInfo.market.language}}\n- **Target Market:** {{$json.productInfo.market.targetMarket}}\n\n---\n\n## BENEFIT CATEGORIES AND SUB-CATEGORIES  \n**Use these keys, never translated or changed:**\n\n**1. FINANCIAL:** Cost Savings, Value for Money, Rewards, Security, etc.  \n**2. FUNCTIONAL:** Quality, Reliability, Performance, Safety, etc.  \n**3. SELF-EXPRESSION:** Status, Individuality, Lifestyle, etc.  \n**4. EMOTIONAL:** Security, Belonging, Self-esteem, Joy, etc.  \n**5. EXPERIENTIAL:** Sensory, Adventure, Learning, Entertainment, etc.  \n**6. SOCIAL:** Social Approval, Community, Altruism, etc.  \n**7. CULTURAL:** Representation, Participation, Preservation, Innovation, etc.\n\n---\n\n## RESEARCH & MAPPING METHODOLOGY\n\n- **Framework:** Use Aaker's Brand Equity Model for prioritization.\n- Each benefit description must be in the specified **Target Language**, regardless of the **Target Market**\n- Use the **Target Market** for market research and competitive analysis, but generate all text in the **Target Language**\n- **Steps:**\n  1. Extract authentic stakeholder-focused benefit messaging from their official materials.\n  2. Assign each benefit to the proper **Stakeholder Group > Benefit Category > Sub-Category**, using only the keys listed above.\n  3. Each benefit description must be in {{$json.productInfo.market.language}}, with its source company noted if possible.\n\n- **Stakeholder Groups (use exactly as shown):**  \n  - End-Users  \n  - Employees  \n  - Distributors  \n  - Investors  \n  - Regulators and Compliance Bodies  \n  - Community  \n  - Media and Influencers  \n\n- **Benefit Quantities (rough guideline):**  \n  - End-Users: 15-20 statements  \n  - Employees & Distributors: 8-12 each  \n  - Distributors: 8-12 each\n  - Investors: 6-10 each\n  - Regulators, Community, Media: 5-8 each  \n  - Community: 6-10 each\n\n---\n\n## OUTPUT FORMAT\n\n```jsonc  \n{  \n  \"Points_of_Parity\": {  \n    \"End-Users\": {  \n      \"Financial\": {  \n        \"Cost Savings\": [  \n          \"...\" // Example in target language  \n        ],  \n        \"Value for Money\": [ \"...\" ],  \n        // etc.  \n      },  \n      \"Functional\": {  \n        \"Quality\": [ \"...\" ],  \n        // etc.  \n      }  \n      // more categories...  \n    },  \n    \"Employees\": {  \n      // structure as above  \n    }  \n    // more stakeholder groups...  \n  }  \n}  "
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "temperature": 0.8
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        160,
        -176
      ],
      "id": "2dfc58b6-b424-484e-8ada-93aefa964c0c",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "24f4qODVRQ0INcJS",
          "name": "OpenAI - n8n automations"
        }
      }
    },
    {
      "parameters": {
        "content": "این فلو باید به شیت اکسل مشخص وصل بشه. در اون شیت کشور/منطقه بازار هدف و زبان مورد نظر مشخص میشه و بنفیت‌ها برای اون کشور با زبان تعیین‌شده تدوین می‌شه"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -784,
        -288
      ],
      "typeVersion": 1,
      "id": "eb213233-8d1f-4384-9da5-17b9b90adb71",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -960,
        -80
      ],
      "id": "702b6c06-3022-4b9f-b8b6-969e79e9b4c7",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Read Google Sheet": {
      "main": [
        [
          {
            "node": "Filter Rows To Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Rows To Process": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Action Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "Prepare AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Input": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Data for Update": {
      "main": [
        [
          {
            "node": "Update Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Google Sheet": {
      "main": [
        []
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Format Data for Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Read Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "15babe984bffc8d4488e8a2a0a8ec8f00010a4ffa53aa1beffdf33350e7b8936"
  }
}