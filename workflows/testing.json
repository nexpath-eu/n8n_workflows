{
  "createdAt": "2025-08-07T08:41:46.270Z",
  "updatedAt": "2025-08-07T09:47:31.933Z",
  "id": "y9cNBjTJybzzRsD7",
  "name": "testing",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ",
          "mode": "list",
          "cachedResultName": "Congru UNSPSC BVP",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 430930944,
          "mode": "list",
          "cachedResultName": "Persian-Iran",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit#gid=430930944"
        },
        "options": {}
      },
      "name": "Read Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        560,
        272
      ],
      "id": "eded2173-59ed-4b7c-b6d4-76c51d55c286",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GP0ycwiOqi6LmXaw",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"Status\"]}}",
              "operation": "notEqual",
              "value2": "Done"
            }
          ]
        }
      },
      "name": "Filter Rows To Process",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        784,
        272
      ],
      "id": "4b1d48c0-962a-43d4-a949-1cac7e990083"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "reset": false
        }
      },
      "name": "SplitInBatches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        1008,
        176
      ],
      "id": "f41beb7d-047c-403d-8522-10fe944d5b7b",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for the AI prompt\nconst item = $input.item;\n\n// Get the commodity information\nconst commodityCode = item.json[\"Commodity Code\"];\nconst commodityTitle = item.json[\"Commodity Title\"];\nconst persianName = item.json[\"Persian name\"];\nconst classCode = item.json[\"Class Code\"];\nconst classTitle = item.json[\"Class Title\"];\nconst familyCode = item.json[\"Family Code\"];\nconst familyTitle = item.json[\"Family Title\"];\nconst segmentCode = item.json[\"Segment Code\"];\nconst segmentTitle = item.json[\"Segment Title\"];\n\n// Get language and target market from the current item\nconst language = item.json[\"Language\"];\nconst targetMarket = item.json[\"Target Market\"];\n\n// Create structured product information for AI\nconst productInfo = {\n  commodity: {\n    code: commodityCode,\n    title: commodityTitle,\n    persianName: persianName\n  },\n  class: {\n    code: classCode,\n    title: classTitle\n  },\n  family: {\n    code: familyCode,\n    title: familyTitle\n  },\n  segment: {\n    code: segmentCode,\n    title: segmentTitle\n  },\n  market: {\n    language: language,\n    targetMarket: targetMarket\n  },\n  stakeholderGroups: [\n    \"End-Users (Consumers)\",\n    \"Employees\", \n    \"Distributors\",\n    \"Investors\",\n    \"Regulators and Compliance Bodies\",\n    \"Community\",\n    \"Media and Influencers\"\n  ]\n};\n\n// Store the row index for later update (get from row_number if available)\nconst rowIndex = item.json.row_number || item.index || 0;\n\n// Return the formatted data\nreturn {\n  json: {\n    productInfo,\n    rowIndex,\n    rawData: item.json\n  }\n};"
      },
      "name": "Prepare AI Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        176
      ],
      "id": "fbdc25c0-606a-41da-9fdd-09066e6377f8"
    },
    {
      "parameters": {
        "jsCode": "// Get the input item\nconst item = $input.item;\n\n// Get analysis data from the OpenAI response\nlet analysisData = null;\nlet productNameLocalized = \"\";\ntry {\n  // The OpenAI node returns data in message.content format\n  let content = null;\n  \n  // Check for OpenAI response structure\n  if (item.json && item.json.message && item.json.message.content) {\n    content = item.json.message.content;\n  } else if (item.json && item.json.content) {\n    content = item.json.content;\n  } else if (item.json && item.json.output) {\n    content = item.json.output;\n  }\n  \n  // If content is a string, parse it as JSON\n  if (typeof content === 'string') {\n    const parsedContent = JSON.parse(content);\n    analysisData = parsedContent.Points_of_Parity || parsedContent;\n    productNameLocalized = parsedContent.ProductName_Localized || \"\";\n  } else if (content && content.Points_of_Parity) {\n    analysisData = content.Points_of_Parity;\n    productNameLocalized = content.ProductName_Localized || \"\";\n  } else if (content) {\n    analysisData = content;\n    productNameLocalized = content.ProductName_Localized || \"\";\n  }\n  \n  console.log('Analysis data extracted:', analysisData);\n  console.log('ProductName_Localized:', productNameLocalized);\n  \n} catch (error) {\n  console.log('Error extracting Analysis data:', error.message);\n  console.log('Raw item data:', JSON.stringify(item.json, null, 2));\n}\n\n// Get the original row data from the Prepare AI Input node\nconst rawData = $('Prepare AI Input').item.json.rawData;\n\n// Improved RTF formatting function for benefits\nconst formatBenefitsRTF = (stakeholderBenefits) => {\n  if (!stakeholderBenefits || typeof stakeholderBenefits !== 'object') return '';\n  \n  let result = '';\n  \n  // Iterate through benefit categories (Financial, Functional, etc.)\n  for (const [categoryName, categoryData] of Object.entries(stakeholderBenefits)) {\n    if (categoryData && typeof categoryData === 'object') {\n      \n      // Check if this category has any benefits\n      const hasContent = Object.values(categoryData).some(subCategory => \n        Array.isArray(subCategory) && subCategory.length > 0\n      );\n      \n      if (hasContent) {\n        result += `━━━ ${categoryName.toUpperCase()} BENEFITS ━━━\\n\\n`;\n        \n        // Iterate through sub-categories\n        for (const [subCategoryName, benefits] of Object.entries(categoryData)) {\n          if (Array.isArray(benefits) && benefits.length > 0) {\n            result += `${subCategoryName}:\\n`;\n            benefits.forEach((benefit) => {\n              result += `▪ ${benefit}\\n`;\n            });\n            result += '\\n';\n          }\n        }\n        result += '\\n';\n      }\n    }\n  }\n  \n  return result.trim();\n};\n\n// Create the output object with EXACT column names\nconst outputData = {\n  \"Commodity Code\": rawData[\"Commodity Code\"] || \"\",\n  \"Commodity Title\": rawData[\"Commodity Title\"] || \"\",\n  \"Language\": rawData[\"Language\"] || \"\",\n  \"Target Market\": rawData[\"Target Market\"] || \"\",\n  \"Local Product Name\": productNameLocalized || \"\",\n  \"Market Leaders\": \"\",\n  \"Class Code\": rawData[\"Class Code\"] || \"\",\n  \"Class Title\": rawData[\"Class Title\"] || \"\",\n  \"Family Code\": rawData[\"Family Code\"] || \"\",\n  \"Family Title\": rawData[\"Family Title\"] || \"\",\n  \"Segment Code\": rawData[\"Segment Code\"] || \"\",\n  \"Segment Title\": rawData[\"Segment Title\"] || \"\",\n  \"End-Users (Consumers)\": \"\",\n  \"Employees\": \"\",\n  \"Distributors\": \"\",\n  \"Investors\": \"\",\n  \"Regulators and Compliance Bodies\": \"\",\n  \"Community\": \"\",\n  \"Media and Influencers\": \"\",\n  \"Date\": new Date().toISOString(),\n  \"Status\": \"Done\"\n};\n\n// Process stakeholder benefits data if available\nif (analysisData) {\n  const stakeholderMap = {\n    'End-Users': 'End-Users (Consumers)',\n    'Employees': 'Employees',\n    'Distributors': 'Distributors',\n    'Investors': 'Investors',\n    'Regulators and Compliance Bodies': 'Regulators and Compliance Bodies',\n    'Community': 'Community',\n    'Media and Influencers': 'Media and Influencers'\n  };\n  \n  for (const [aiKey, sheetColumn] of Object.entries(stakeholderMap)) {\n    if (analysisData[aiKey]) {\n      const formattedBenefits = formatBenefitsRTF(analysisData[aiKey]);\n      if (formattedBenefits) {\n        outputData[sheetColumn] = formattedBenefits;\n        console.log(`Formatted benefits for ${sheetColumn}:`, formattedBenefits.substring(0, 100) + '...');\n      }\n    }\n  }\n} else {\n  console.log('No analysis data found to process');\n}\n\n// Debug output\nconsole.log('Final output data keys:', Object.keys(outputData));\nconsole.log('Sample stakeholder content:', outputData['End-Users (Consumers)'].substring(0, 200));\n\nreturn {\n  json: outputData\n};\n"
      },
      "name": "Format Data for Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1856,
        176
      ],
      "id": "e6088065-a458-4ab8-aaca-899e3b42935b",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ",
          "mode": "list",
          "cachedResultName": "Congru UNSPSC BVP",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 430930944,
          "mode": "list",
          "cachedResultName": "Persian-Iran",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11oBLnrpcmygkKhF0tK62iZ6ntTHG_cIprOklEnExwoQ/edit#gid=430930944"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "Commodity Title"
          ],
          "schema": [
            {
              "id": "Commodity Code",
              "displayName": "Commodity Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Commodity Title",
              "displayName": "Commodity Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Language",
              "displayName": "Language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Target Market",
              "displayName": "Target Market",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Local Product Name",
              "displayName": "Local Product Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Market Leaders",
              "displayName": "Market Leaders",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Class Code",
              "displayName": "Class Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Class Title",
              "displayName": "Class Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Family Code",
              "displayName": "Family Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Family Title",
              "displayName": "Family Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Segment Code",
              "displayName": "Segment Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Segment Title",
              "displayName": "Segment Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "End-Users (Consumers)",
              "displayName": "End-Users (Consumers)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Employees",
              "displayName": "Employees",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Distributors",
              "displayName": "Distributors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Investors",
              "displayName": "Investors",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Regulators and Compliance Bodies",
              "displayName": "Regulators and Compliance Bodies",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Community",
              "displayName": "Community",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Media and Influencers",
              "displayName": "Media and Influencers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "output",
              "displayName": "output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "name": "Update Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        2080,
        176
      ],
      "id": "f2eef20a-6489-4ce9-940c-df3336184c8f",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GP0ycwiOqi6LmXaw",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "name": "No Action Needed",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1008,
        368
      ],
      "id": "75dfcda4-627d-4e24-9d7f-66903070fc7f"
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "message",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        1456,
        176
      ],
      "id": "d01d986d-59aa-4152-b923-2aa1117c253c",
      "name": "OpenAI Enhanced",
      "credentials": {
        "openAiApi": {
          "id": "24f4qODVRQ0INcJS",
          "name": "OpenAI - n8n automations"
        }
      }
    },
    {
      "parameters": {
        "content": "این فلو باید به شیت اکسل مشخص وصل بشه. در اون شیت کشور/منطقه بازار هدف و زبان مورد نظر مشخص میشه و بنفیت‌ها برای اون کشور با زبان تعیین‌شده تدوین می‌شه"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        512,
        64
      ],
      "typeVersion": 1,
      "id": "a5ce3351-abe2-4fb7-8c1e-a79a280d358c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        336,
        272
      ],
      "id": "38c63835-85a3-42d3-ae90-39d7f18add7b",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Read Google Sheet": {
      "main": [
        [
          {
            "node": "Filter Rows To Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Rows To Process": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Action Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "Prepare AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Input": {
      "main": [
        [
          {
            "node": "OpenAI Enhanced",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Data for Update": {
      "main": [
        [
          {
            "node": "Update Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Enhanced": {
      "main": [
        [
          {
            "node": "Format Data for Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Read Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "c2eedd42-c7b8-4e9e-b999-3583aac7e1cf",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-07T08:41:46.270Z",
      "updatedAt": "2025-08-07T08:41:46.270Z",
      "role": "workflow:owner",
      "workflowId": "y9cNBjTJybzzRsD7",
      "projectId": "KsMRkGjzjIgqFizG",
      "project": {
        "createdAt": "2025-05-28T07:38:53.543Z",
        "updatedAt": "2025-05-28T07:43:11.983Z",
        "id": "KsMRkGjzjIgqFizG",
        "name": "Shahram Soboutipour <soboutipour@gmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-05-28T07:38:53.543Z",
            "updatedAt": "2025-05-28T07:38:53.543Z",
            "role": "project:personalOwner",
            "userId": "d04c1dfc-dfd7-4820-9571-46e93764563b",
            "projectId": "KsMRkGjzjIgqFizG",
            "user": {
              "createdAt": "2025-05-28T07:38:53.543Z",
              "updatedAt": "2025-08-31T04:01:19.374Z",
              "id": "d04c1dfc-dfd7-4820-9571-46e93764563b",
              "email": "soboutipour@gmail.com",
              "firstName": "Shahram",
              "lastName": "Soboutipour",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-05-28T07:43:38.909Z",
                "personalization_survey_n8n_version": "1.94.1",
                "companySize": "<20",
                "companyType": "saas",
                "role": "business-owner",
                "reportedSource": "google"
              },
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "EorUVSEUqCHFbJQl",
                "userActivated": true,
                "userActivatedAt": 1748458318288,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1754592946568
                },
                "dismissedCallouts": {
                  "preBuiltAgentsCalloutGoogleSheets": true
                }
              },
              "role": "global:member",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-08-31",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}
